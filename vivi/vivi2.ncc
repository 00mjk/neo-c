#include "neo-c.h"

extern "C"
{
#include <stdio.h>
#include <stdlib.h>
#include <ncurses.h>
#include <sys/ioctl.h>
#include <unistd.h>
}

#include "vivi.h"

impl win version 2 {
    def input(self:win*, vivi:vivi*) {
        var key = wgetch(self.win);

        var event = vivi.events.item(key, null);

        if(event != null) {
            event(vivi, key);
        }
    }
}

struct vivi version 2 {
    events: vector<lambda(vivi*, int)>*%;
    app_end: bool;
}

impl vivi version 2 {
    initialize() {
        self.init_curses();

        self.wins = new vector<win*%>.initialize();

        var maxx = xgetmaxx();
        var maxy = xgetmaxy();

        var win = new win.initialize(0,0, maxx-1, maxy);

        win.texts.push_back(string("aaa"));
        win.texts.push_back(string("bbb"));
        win.texts.push_back(string("ccc"));

        self.active_win = win;

        self.wins.push_back(win);

        self.app_end = false;

        self.events = new vector<lambda(vivi*, int)>.initialize_with_values(KEY_MAX, null);

        self.events.replace('q') {
            it.app_end = true;
        }
/*
        self.events.replace('q', lambda(self:vivi*, key:int) 
        {
            self.app_end = true;
        });
*/
    }

    def main_loop(self:vivi*):int {
        while(!self.app_end) {
            erase();

            self.wins.each {
                it.view();
            }

            self.active_win.input(self);
        }

        0
    }
}
