#include "neo-c.h"

extern "C"
{
#include <stdio.h>
#include <stdlib.h>
#include <ncurses.h>
#include <sys/ioctl.h>
#include <unistd.h>
}

/*
#include "vivi.h"

impl win {
    def view(self:win*) {
        werase(self.win);

        self.texts.each {
            mvwprintw(self.win, it2, 0, it);
        }

        wrefresh(self.win);
    }

    def input(self:win*, vivi:vivi*) {
        var key = wgetch(self.win);

        vivi.runEvent(key);
    }
}

struct vivi {
    events: vector<lambda(vivi*, int):bool?>*%;
    app_end: bool;
}

impl vivi version 2 {
    initialize() {
        init_curses();

        self.wins = new vector<win*%>.initialize();

        var maxx = xgetmaxx();
        var maxy = xgetmaxy();

        var win = new win.initialize(0,0, maxx-1, maxy);

        win.texts.push_back(string("aaa"));
        win.texts.push_back(string("bbb"));
        win.texts.push_back(string("ccc"));

        self.active_win = win;

        self.wins.push_back(win);

        self.app_end = false;

        self.events = new vector<lambda(vivi&, int):bool?>.initialize();

        self.events.fill(KEY_MAX, null);

        self.events.repace('q', lambda(key:int) 
        {
            
        });
    }

    finalize() {
        endwin();
    }

    def main_loop(self:vivi*):int {
        while(true) {
            erase();

            self.wins.each {
                it.view();
            }

            self.active_win.input();
        }

        0
    }
}
*/
