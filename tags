Mcompiler	src/compiler.c	/^int main(int argc, char** argv)$/
Mpreprocessor	src/preprocessor.c	/^int main(int argc, char* argv[])$/
TRUE	src/klass.c	/^                    p2->mFreed = TRUE;$/
__sbrk	src/sbrk.c	/^void * __sbrk (intptr_t increment)$/
add_fields_to_struct	src/klass.c	/^void add_fields_to_struct(sCLClass* klass, int num/
add_fields_to_union	src/klass.c	/^void add_fields_to_union(sCLClass* klass, int num_/
add_preprocessor	src/preprocessor.c	/^static BOOL add_preprocessor(char* name, MANAGED s/
add_typedef	src/typedef.c	/^void add_typedef(char* name, sNodeType* node_type)/
alignment	src/alignment.c	/^void alignment(unsigned int* size)$/
alignment_pointer	src/alignment.c	/^void alignment_pointer(char** p, char* head)$/
alloc_class	src/klass.c	/^static sCLClass* alloc_class(char* class_name, BOO/
alloc_enum	src/klass.c	/^sCLClass* alloc_enum(char* class_name)$/
alloc_node	src/node_alloc.c	/^unsigned int alloc_node()$/
alloc_node_type	src/node_type.c	/^static sNodeType* alloc_node_type()$/
alloc_struct	src/klass.c	/^sCLClass* alloc_struct(char* class_name, BOOL anon/
alloc_union	src/klass.c	/^sCLClass* alloc_union(char* class_name, BOOL anony/
append_debug_heap_memory	src/memalloc-stdc.c	/^static void append_debug_heap_memory(void* mem, ch/
append_double_value_to_constant_pool	src/constant.c	/^unsigned int append_double_value_to_constant_pool(/
append_float_value_to_constant_pool	src/constant.c	/^unsigned int append_float_value_to_constant_pool(s/
append_int_value_to_constant_pool	src/constant.c	/^unsigned int append_int_value_to_constant_pool(sCo/
append_macro	src/macro.c	/^void append_macro(char* name, char* body)$/
append_node_to_node_block	src/node_alloc.c	/^void append_node_to_node_block(sNodeBlock* node_bl/
append_str_to_constant_pool	src/constant.c	/^unsigned int append_str_to_constant_pool(sConst* c/
append_wstr_to_constant_pool	src/constant.c	/^unsigned int append_wstr_to_constant_pool(sConst* /
arrange_alignment	src/constant.c	/^static void arrange_alignment(sConst* self)$/
auto_cast_posibility	src/node_type.c	/^BOOL auto_cast_posibility(sNodeType* left_type, sN/
call_macro	src/macro.c	/^BOOL call_macro(unsigned * node, char* name, char*/
call_preprocessor	src/preprocessor.c	/^static BOOL call_preprocessor(sBuf* command, sBuf*/
cast_posibility	src/node_type.c	/^BOOL cast_posibility(sNodeType* left_type, sNodeTy/
check_already_added_variable	src/vtable.c	/^void check_already_added_variable(sVarTable* table/
check_the_same_fields	src/node_type.c	/^BOOL check_the_same_fields(sNodeType* left_node, s/
class_final	src/klass.c	/^void class_final()$/
class_init	src/klass.c	/^void class_init()$/
clone_class	src/klass.c	/^sCLClass* clone_class(sCLClass* klass)$/
clone_node_type	src/node_type.c	/^sNodeType* clone_node_type(sNodeType* node_type)$/
clone_var_table	src/vtable.c	/^sVarTable* clone_var_table(sVarTable* lv_table)$/
compile_source	src/source_compiler.c	/^BOOL compile_source(char* fname, char* source, BOO/
compiler	src/compiler.c	/^static BOOL compiler(char* fname, BOOL optimize, s/
compiler_final	src/compiler.c	/^static void compiler_final()$/
compiler_init	src/compiler.c	/^static void compiler_init()$/
create_anoymous_struct_name	src/parser.c	/^static void create_anoymous_struct_name(char* stru/
create_lambda_name	src/parser.c	/^void create_lambda_name(char* lambda_name, size_t /
create_node_type_with_class_name	src/node_type.c	/^sNodeType* create_node_type_with_class_name(char* /
create_node_type_with_class_pointer	src/node_type.c	/^sNodeType* create_node_type_with_class_pointer(sCL/
create_type_name_from_node_type	src/node_type.c	/^void create_type_name_from_node_type(char* type_na/
debug_show_none_freed_heap_memory	src/memalloc-stdc.c	/^void debug_show_none_freed_heap_memory() $/
debug_xcalloc	src/memalloc-stdc.c	/^void *debug_xcalloc(long long int num, long long i/
delete_comment	src/source_compiler.c	/^BOOL delete_comment(sBuf* source, sBuf* source2)$/
delete_debug_heap_memory	src/memalloc-stdc.c	/^static void delete_debug_heap_memory(void* mem)$/
expect_next_character_with_one_forward	src/parser.c	/^void expect_next_character_with_one_forward(char* /
expression	src/parser.c	/^BOOL expression(unsigned int* node, sParserInfo* i/
expression_add_sub	src/parser.c	/^static BOOL expression_add_sub(unsigned int* node,/
expression_and	src/parser.c	/^static BOOL expression_and(unsigned int* node, sPa/
expression_and_and_or_or	src/parser.c	/^static BOOL expression_and_and_or_or(unsigned int*/
expression_comma_operator	src/parser.c	/^static BOOL expression_comma_operator(unsigned int/
expression_comparison	src/parser.c	/^static BOOL expression_comparison(unsigned int* no/
expression_conditional_operator	src/parser.c	/^static BOOL expression_conditional_operator(unsign/
expression_equal	src/parser.c	/^static BOOL expression_equal(unsigned int* node, s/
expression_mult_div	src/parser.c	/^static BOOL expression_mult_div(unsigned int* node/
expression_node	src/parser.c	/^static BOOL expression_node(unsigned int* node, BO/
expression_or	src/parser.c	/^static BOOL expression_or(unsigned int* node, sPar/
expression_shift	src/parser.c	/^static BOOL expression_shift(unsigned int* node, s/
expression_xor	src/parser.c	/^static BOOL expression_xor(unsigned int* node, sPa/
extname	src/preprocessor.c	/^static char* extname(char* file_name)$/
final_vtable	src/vtable.c	/^void final_vtable()$/
finalize_macro	src/macro.c	/^void finalize_macro()$/
found	src/vtable.c	/^\/\/ result: (null) not found (sVar*) found$/
free_block_variables_on_break	src/vtable.c	/^void free_block_variables_on_break(struct sNodeBlo/
free_class	src/klass.c	/^static void free_class(sCLClass* klass)$/
free_node_types	src/node_type.c	/^void free_node_types()$/
free_nodes	src/node_alloc.c	/^void free_nodes()$/
free_objects	src/vtable.c	/^void free_objects(sVarTable* table, sCompileInfo* /
free_objects_on_break	src/vtable.c	/^void free_objects_on_break(sVarTable* table, sComp/
get_block_text	src/parser.c	/^static BOOL get_block_text(sBuf* buf, sParserInfo*/
get_class	src/klass.c	/^sCLClass* get_class(char* class_name)$/
get_command_result	src/macro.c	/^static BOOL get_command_result(sBuf* command_resul/
get_field_index	src/klass.c	/^int get_field_index(sCLClass* klass, char* var_nam/
get_free_block	src/memalloc.c	/^struct header_t *get_free_block(size_t size)$/
get_func	src/preprocessor.c	/^static sPreprocessorFunction* get_func(char* name)/
get_hash_key	src/klass.c	/^unsigned int get_hash_key(char* name, unsigned int/
get_hex_number	src/parser.c	/^BOOL get_hex_number(unsigned int* node, sParserInf/
get_macro	src/macro.c	/^char* get_macro(char* name)$/
get_number	src/parser.c	/^BOOL get_number(BOOL minus, unsigned int* node, sP/
get_oct_number	src/parser.c	/^BOOL get_oct_number(unsigned int* node, sParserInf/
get_parent_var_num_of_sum	src/vtable.c	/^int get_parent_var_num_of_sum(sVarTable* table)$/
get_sum_of_parent_var_num	src/vtable.c	/^static int get_sum_of_parent_var_num(sVarTable* ta/
get_type_of_method_generics	src/node_type.c	/^BOOL get_type_of_method_generics(sNodeType* method/
get_typedef	src/typedef.c	/^sNodeType* get_typedef(char* name)$/
get_var_num	src/vtable.c	/^int get_var_num(sVarTable* table)$/
get_variable_from_index	src/vtable.c	/^sVar* get_variable_from_index(sVarTable* table, in/
get_variable_index	src/vtable.c	/^int get_variable_index(sVarTable* table, char* nam/
header_t	src/memalloc.c	/^struct header_t {$/
included_generics_type	src/node_type.c	/^BOOL included_generics_type(sNodeType* node_type, /
init_block_vtable	src/vtable.c	/^sVarTable* init_block_vtable(sVarTable* lv_table, /
init_macro	src/macro.c	/^void init_macro()$/
init_node_types	src/node_type.c	/^void init_node_types()$/
init_nodes	src/node_alloc.c	/^void init_nodes()$/
init_typedef	src/typedef.c	/^void init_typedef()$/
init_var_table	src/vtable.c	/^sVarTable* init_var_table()$/
init_vtable	src/vtable.c	/^void init_vtable()$/
is_included_var_from_this_table_only	src/vtable.c	/^BOOL is_included_var_from_this_table_only(sVarTabl/
is_number_type	src/node_type.c	/^BOOL is_number_type(sNodeType* node_type)$/
is_premitive_type	src/parser.c	/^static BOOL is_premitive_type(char* buf, sParserIn/
is_type_name	src/parser.c	/^static BOOL is_type_name(char* buf, sParserInfo* i/
is_typeof_type	src/node_type.c	/^BOOL is_typeof_type(sNodeType* node_type)$/
libc_hidden_def	src/sbrk.c	/^libc_hidden_def (__sbrk)$/
load_class	src/klass.c	/^static sCLClass* load_class(char* class_name, int /
load_class_from_class_file	src/klass.c	/^static sCLClass* load_class_from_class_file(char* /
mystrncpy	src/memalloc-stdc.c	/^char* mystrncpy(char* des, char* src, int size)$/
parse_alignof	src/parser.c	/^static BOOL parse_alignof(unsigned int* node, sPar/
parse_alloca	src/parser.c	/^static BOOL parse_alloca(unsigned int* node, sPars/
parse_anonymous_enum	src/parser.c	/^static BOOL parse_anonymous_enum(unsigned int* nod/
parse_attribute	src/parser.c	/^static BOOL parse_attribute(sParserInfo* info, cha/
parse_borrow	src/parser.c	/^BOOL parse_borrow(unsigned int* node, sParserInfo*/
parse_call_macro	src/parser.c	/^BOOL parse_call_macro(unsigned int* node, char* na/
parse_case	src/parser.c	/^static BOOL parse_case(unsigned int* node, sParser/
parse_class_name	src/node_type.c	/^static sNodeType* parse_class_name(char** p, char*/
parse_class_name_expression	src/parser.c	/^BOOL parse_class_name_expression(unsigned int* nod/
parse_clone	src/parser.c	/^BOOL parse_clone(unsigned int* node, sParserInfo* /
parse_cmp	src/parser.c	/^int parse_cmp(char* p, char* str)$/
parse_constructor	src/parser.c	/^static BOOL parse_constructor(unsigned int* node, /
parse_default	src/parser.c	/^static BOOL parse_default(unsigned int* node, sPar/
parse_delete	src/parser.c	/^BOOL parse_delete(unsigned int* node, sParserInfo*/
parse_destructor	src/parser.c	/^BOOL parse_destructor(unsigned int* node, char* st/
parse_do	src/parser.c	/^static BOOL parse_do(unsigned int* node, sParserIn/
parse_dummy_heap	src/parser.c	/^BOOL parse_dummy_heap(unsigned int* node, sParserI/
parse_enum	src/parser.c	/^BOOL parse_enum(unsigned int* node, char* name, sP/
parse_for	src/parser.c	/^static BOOL parse_for(unsigned int* node, sParserI/
parse_funcation_call_params	src/parser.c	/^static BOOL parse_funcation_call_params(int* num_p/
parse_function	src/parser.c	/^BOOL parse_function(unsigned int* node, sNodeType*/
parse_generics_function	src/parser.c	/^static BOOL parse_generics_function(unsigned int* /
parse_goto	src/parser.c	/^static BOOL parse_goto(unsigned int* node, sParser/
parse_if	src/parser.c	/^static BOOL parse_if(unsigned int* node, sParserIn/
parse_impl	src/parser.c	/^static BOOL parse_impl(unsigned int* node, sParser/
parse_impl_end	src/parser.c	/^static void parse_impl_end(sParserInfo* info)$/
parse_inherit	src/parser.c	/^static BOOL parse_inherit(unsigned int* node, sPar/
parse_inline_function	src/parser.c	/^static BOOL parse_inline_function(unsigned int* no/
parse_is_heap	src/parser.c	/^static BOOL parse_is_heap(unsigned int* node, sPar/
parse_label	src/parser.c	/^static BOOL parse_label(unsigned int* node, char* /
parse_lambda	src/parser.c	/^static BOOL parse_lambda(unsigned int* node, sPars/
parse_macro	src/parser.c	/^BOOL parse_macro(unsigned int* node, sParserInfo* /
parse_managed	src/parser.c	/^BOOL parse_managed(unsigned int* node, sParserInfo/
parse_method_generics_function	src/parser.c	/^static BOOL parse_method_generics_function(unsigne/
parse_new	src/parser.c	/^static BOOL parse_new(unsigned int* node, sParserI/
parse_param	src/parser.c	/^static BOOL parse_param(sParserParam* param, sPars/
parse_params	src/parser.c	/^static BOOL parse_params(sParserParam* params, int/
parse_return	src/parser.c	/^static BOOL parse_return(unsigned int* node, sPars/
parse_ruby_macro	src/parser.c	/^BOOL parse_ruby_macro(unsigned int* node, sParserI/
parse_sharp	src/parser.c	/^BOOL parse_sharp(sParserInfo* info)$/
parse_simple_lambda_params	src/parser.c	/^static BOOL parse_simple_lambda_params(unsigned in/
parse_sizeof	src/parser.c	/^static BOOL parse_sizeof(unsigned int* node, sPars/
parse_struct	src/parser.c	/^static BOOL parse_struct(unsigned int* node, char*/
parse_switch	src/parser.c	/^static BOOL parse_switch(unsigned int* node, sPars/
parse_type	src/parser.c	/^static BOOL parse_type(sNodeType** result_type, sP/
parse_typedef	src/parser.c	/^BOOL parse_typedef(unsigned int* node, sParserInfo/
parse_typedef_attribute	src/parser.c	/^static BOOL parse_typedef_attribute(sParserInfo* i/
parse_union	src/parser.c	/^static BOOL parse_union(unsigned int* node, char* /
parse_va_arg	src/parser.c	/^static BOOL parse_va_arg(unsigned int* node, sPars/
parse_var	src/parser.c	/^static BOOL parse_var(unsigned int* node, sParserI/
parse_variable	src/parser.c	/^static BOOL parse_variable(unsigned int* node, sNo/
parse_variable_name	src/parser.c	/^static BOOL parse_variable_name(char* buf, int buf/
parse_version	src/parser.c	/^static void parse_version(int* version, sParserInf/
parse_while	src/parser.c	/^static BOOL parse_while(unsigned int* node, sParse/
parse_word	src/parser.c	/^BOOL parse_word(char* buf, int buf_size, sParserIn/
parser_err_msg	src/parser.c	/^void parser_err_msg(sParserInfo* info, const char*/
parser_final	src/parser.c	/^void parser_final()$/
parser_init	src/parser.c	/^void parser_init()$/
postposition_operator	src/parser.c	/^static BOOL postposition_operator(unsigned int* no/
preprocess_source	src/preprocessor.c	/^static BOOL preprocess_source(char* sname, char* o/
preprocessor	src/preprocessor.c	/^static BOOL preprocessor(sBuf* source, sBuf* sourc/
preprocessor_final	src/preprocessor.c	/^static void preprocessor_final()$/
preprocessor_init	src/preprocessor.c	/^static void preprocessor_init()$/
put_class_to_table	src/klass.c	/^static BOOL put_class_to_table(char* class_name, s/
read_char_from_file	src/klass.c	/^void read_char_from_file(char** p, char* c)$/
read_class_from_file	src/klass.c	/^static sCLClass* read_class_from_file(char* class_/
read_const_from_file	src/klass.c	/^void read_const_from_file(char** p, sConst* consta/
read_from_file	src/klass.c	/^void read_from_file(char** p, void* buf, size_t si/
read_int_from_file	src/klass.c	/^void read_int_from_file(char** p, int* n)$/
read_long_from_file	src/klass.c	/^void read_long_from_file(char** p, clint64* n)$/
read_source	src/source_compiler.c	/^BOOL read_source(char* fname, sBuf* source)$/
remove_class	src/klass.c	/^static void remove_class(char* class_name)$/
restore_var_table	src/vtable.c	/^void restore_var_table(sVarTable* left, sVarTable*/
sBuf_append	src/buffer.c	/^void sBuf_append(sBuf* self, void* str, size_t siz/
sBuf_append_char	src/buffer.c	/^void sBuf_append_char(sBuf* self, char c)$/
sBuf_append_int	src/buffer.c	/^void sBuf_append_int(sBuf* self, int value)$/
sBuf_append_long	src/buffer.c	/^void sBuf_append_long(sBuf* self, long long value)/
sBuf_append_str	src/buffer.c	/^void sBuf_append_str(sBuf* self, char* str)$/
sBuf_clone	src/buffer.c	/^void sBuf_clone(sBuf* self, sBuf* buf)$/
sBuf_init	src/buffer.c	/^void sBuf_init(sBuf* self)$/
sConst_append	src/constant.c	/^unsigned int sConst_append(sConst* self, void* dat/
sConst_clone	src/constant.c	/^void sConst_clone(sConst* self, sConst* constant)$/
sConst_free	src/constant.c	/^void sConst_free(sConst* self)$/
sConst_init	src/constant.c	/^void sConst_init(sConst* self)$/
sConst_init_with_size	src/constant.c	/^void sConst_init_with_size(sConst* self, unsigned /
sHeapDebug	src/memalloc-stdc.c	/^struct sHeapDebug {$/
sMacro	src/macro.c	/^struct sMacro {$/
sNodeBlock_alloc	src/node_alloc.c	/^sNodeBlock* sNodeBlock_alloc()$/
sNodeBlock_free	src/node_alloc.c	/^void sNodeBlock_free(sNodeBlock* block)$/
sPreprocessorFunction	src/preprocessor.c	/^typedef struct sPreprocessorFunctionStruct sPrepro/
sPreprocessorFunctionStruct	src/preprocessor.c	/^struct sPreprocessorFunctionStruct {$/
search_for_class_file	src/klass.c	/^static BOOL search_for_class_file(char* class_name/
set_max_block_var_num	src/vtable.c	/^void set_max_block_var_num(sVarTable* lv_table, sV/
show_node_type	src/node_type.c	/^void show_node_type(sNodeType* type)$/
show_type_core	src/node_type.c	/^void show_type_core(sNodeType* type) $/
show_vtable	src/vtable.c	/^void show_vtable(sVarTable* table)$/
show_vtable_current_only	src/vtable.c	/^void show_vtable_current_only(sVarTable* table)$/
skip_paren	src/parser.c	/^static BOOL skip_paren(char head_char, char tail_c/
skip_spaces	src/parser.c	/^void skip_spaces(sParserInfo* info)$/
skip_spaces_and_lf	src/parser.c	/^void skip_spaces_and_lf(sParserInfo* info)$/
skip_spaces_for_parse_class_name	src/node_type.c	/^static void skip_spaces_for_parse_class_name(char*/
solve_generics	src/node_type.c	/^BOOL solve_generics(sNodeType** node_type, sNodeTy/
solve_method_generics	src/node_type.c	/^BOOL solve_method_generics(sNodeType** node_type, /
solve_typeof	src/node_type.c	/^BOOL solve_typeof(sNodeType** node_type, sCompileI/
substitution_posibility	src/node_type.c	/^BOOL substitution_posibility(sNodeType* left_type,/
success	src/vtable.c	/^\/\/ result: (true) success (false) overflow the t/
type_identify	src/node_type.c	/^BOOL type_identify(sNodeType* left, sNodeType* rig/
type_identify_with_class_name	src/node_type.c	/^BOOL type_identify_with_class_name(sNodeType* left/
write_to_automatically_header	src/parser.c	/^static BOOL write_to_automatically_header(sBuf* bu/
xasprintf	src/memalloc-stdc.c	/^void *xasprintf(char* msg, ...)$/
xcalloc	src/memalloc.c	/^void *xcalloc(size_t num, size_t nsize)$/
xfree	src/memalloc.c	/^void xfree(void *block)$/
xmalloc	src/memalloc.c	/^void *xmalloc(size_t size)$/
xmemcpy	src/memalloc.c	/^char* xmemcpy(char* mem, char* mem2, int size)$/
xmemdup	src/memalloc.c	/^void *xmemdup(char *block)$/
xrealloc	src/memalloc.c	/^void *xrealloc(char *block, size_t size)$/
xsprintf	src/memalloc-stdc.c	/^void *xsprintf(char* msg, ...)$/
xstrdup	src/xfunc.c	/^ALLOC char* xstrdup(char* str)$/
xstrncat	src/xfunc.c	/^char* xstrncat(char* des, char* str, int size)$/
xstrncpy	src/xfunc.c	/^char* xstrncpy(char* des, char* src, int size)$/
xxxcalloc	src/memalloc-stdc.c	/^void *xxxcalloc(long long num, long long nsize)$/
xxxfree	src/memalloc-stdc.c	/^void xxxfree(void *block)$/
xxxmalloc	src/memalloc-stdc.c	/^void *xxxmalloc(long long size)$/
xxxmalloc_usable_size	src/memalloc-stdc.c	/^long long xxxmalloc_usable_size(void* block)$/
xxxmemcpy	src/memalloc-stdc.c	/^void* xxxmemcpy(void* mem, void* mem2, long long s/
xxxmemdup	src/memalloc-stdc.c	/^void *xxxmemdup(void *block)$/
xxxrealloc	src/memalloc-stdc.c	/^void *xxxrealloc(void *block, long long size)$/
